{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "484c9052-ce32-4242-9336-20141fb3d9ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "class MusicDataStructuration:\n",
    "    def __init__(self, corpora_path, output_path):\n",
    "        self.corpora_path = corpora_path\n",
    "        self.output_path = output_path\n",
    "        self.result_data = {}\n",
    "        \n",
    "    def extract_paragraphs(self):\n",
    "        \"\"\"\n",
    "        Extrait les paragraphes d'un fichier texte, en excluant ceux qui commencent par \"=\".\n",
    "        \n",
    "        :param file_path: Chemin du fichier à lire.\n",
    "        :return: Liste des paragraphes filtrés.\n",
    "        \"\"\"\n",
    "        \n",
    "        paragraphs = []  # Liste pour stocker les paragraphes\n",
    "        current_paragraph = ''  # Variable temporaire pour stocker le paragraphe courant\n",
    "    \n",
    "        with open(self.corpora_path, 'r', encoding='utf-8') as file:\n",
    "            for line in file:\n",
    "                if line.strip() and not line.strip().startswith(\"=\"):\n",
    "                    current_paragraph += line\n",
    "                elif not line.strip() and current_paragraph:\n",
    "                    # Fin d'un paragraphe, l'ajouter à la liste si non vide\n",
    "                    paragraphs.append(current_paragraph.strip())\n",
    "                    current_paragraph = ''  # Réinitialiser pour le prochain paragraphe\n",
    "    \n",
    "            # Ajouter le dernier paragraphe s'il existe\n",
    "            if current_paragraph:\n",
    "                paragraphs.append(current_paragraph.strip())\n",
    "    \n",
    "        return paragraphs\n",
    "\n",
    "    def music_data_structuration(self):\n",
    "        paragraphs = self.extract_paragraphs()\n",
    "        for index,paragraph in enumerate(paragraphs):\n",
    "\n",
    "            self.result_data[\"P_\"+str(index+1)] = {\n",
    "                \"paragraph\": paragraph,\n",
    "                \"id\": index\n",
    "            }\n",
    "\n",
    "    #export a json file \n",
    "    def export_structured_data(self):\n",
    "        with open(self.output_path, 'w') as json_file:\n",
    "            json.dump(self.result_data, json_file, indent=0)\n",
    "            print(\"file was saved succesfully\")\n",
    "\n",
    "    def run(self):\n",
    "        self.music_data_structuration()\n",
    "        self.export_structured_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "2319b87f-711c-4a46-a0ba-fdd5e06ff821",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "file was saved succesfully\n"
     ]
    }
   ],
   "source": [
    "input_path = \"C:/Users/admin-user/Desktop/my_phd/implementations_KG/data/Music_Bench/Bench_music.txt\" ##\n",
    "output_path = \"C:/Users/admin-user/Desktop/my_phd/implementations_KG/data/Music_Bench/Bench_music.json\"\n",
    "ds = MusicDataStructuration(input_path, output_path)\n",
    "ds.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0d76671-0615-4fe1-8ab0-45f0a987bdeb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
